@model IEnumerable<IsIoTWeb.Models.Reading>
@{
    ViewData["Title"] = "Index";
}
<canvas id="percentage-line-chart" width="600" height="350"></canvas>

<br />

<canvas id="celsius-line-chart" width="600" height="350"></canvas>

<br />

<div>
    <label>Enable Filters</label>
    <input type="checkbox" id="filterCheckbox" name="Filter" />
</div>

<div id="filterDiv">
	<div>
		<label>Collector ID</label>
		<input type="text" id="collectorId"  class="input"/>
	</div>

	<br />
    
    <div id="periodDateFilterDiv">
        <label>From</label>
        <input type="datetime-local" id="fromDateFilter"  class="input"/>
        <label>To</label>
        <input type="datetime-local" id="toDateFilter"  class="input"/>
    </div>
</div>

<br />

<table id="tableReadings">
    <thead>
        <tr>
            <th>
                Collector ID
            </th>
            <th>
                Date
            </th>
            <th>
                Soil Moisture
            </th>
            <th>
                Air Temperature
            </th>
            <th>
                Air Humidity
            </th>
            <th>
                Light Intensity
            </th>
        </tr>
    </thead>
</table>

<link href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.css" rel="stylesheet" type="text/css" />

@section Scripts
{
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.7.0/moment.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
<script type="text/javascript">
	window.percentageChart = {}
	window.percentageChartInit = true
	window.celsiusChartInit = true

	function fetchData(filter) {
		$.ajax({
			type: "POST",
			url: "/Readings/GetReadingsByFilter",
			data: filter,
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			success: OnSuccess,
			failure: function(response) {
				alert(response.d);
			},
			error: function(response) {
				alert(response.d);
			}
		});
	};

	function OnSuccess(response) {
		$("#tableReadings").DataTable({
			destroy: true,
			bLengthChange: true,
			lengthMenu: [[5, 10, 25, -1], [5, 10, 25, "All"]],
			bFilter: true,
			bSort: true,
			stateSave: true,
			bPaginate: true,
			searching: false,
			order: [
				[1, 'desc']
			],
			data: response,
			columns: [{
					data: 'collectorId'
				},
				{
					data: 'timestamp',
					render: function(data, type, row) {
						if (type === "sort")
							return data;
						return moment.unix(data).format("DD/MM/YYYY, HH:mm:ss");
					}
				},
				{
					data: 'soilMoisture',
					render: function(data, type, row) {
						var out = "";
						for (const property in data) {
							out = out + `[${property}]: ${data[property]}% `;
						}
						return out;
					}
				},
				{
					data: 'airTemperature',
					render: function(data, type, row) {
						return data + "°C";
					}
				},
				{
					data: 'airHumidity',
					render: function(data, type, row) {
						return data + "%";
					}
				},
				{
					data: 'lightIntensity',
					render: function(data, type, row) {
						return data + "%";
					}
				}
			]
		});

		if (window.percentageChartInit === true) {
			CreatePercentageChart(response)
			window.percentageChartInit = false
		}

		if (window.celsiusChartInit === true) {
			CreateCelsiusChart(response)
			window.celsiusChartInit = false
		}

		UpdatePercentageChartData(window.percentageChart, response)
		UpdateCelsiusChartData(window.celsiusChart, response)
	};

	function CreatePercentageChart(incomingData) {
		// Draw the chart
		window.percentageChart = new Chart(document.getElementById("percentage-line-chart"), {
			type: 'line',
			data: {
				labels: GetTimestampsAsDates(incomingData.map(a => a.timestamp)),
				datasets: [{
					data: incomingData.map(a => a.soilMoisture[0]),
					label: "Soil Moisture [0]",
					borderColor: "#3e95cd",
					backgroundColor: "#3e95cd",
					borderWidth: 4,
					fill: false,
					tension: 0.5
				}, {
					data: incomingData.map(a => a.soilMoisture[1]),
					label: "Soil Moisture [1]",
					borderColor: "#8e5ea2",
					backgroundColor: "#8e5ea2",
					borderWidth: 4,
					fill: false,
					tension: 0.5
				}, {
					data: incomingData.map(a => a.airHumidity),
					label: "Air Humidity",
					borderColor: "#e8c3b9",
					backgroundColor: "#e8c3b9",
					borderWidth: 4,
					fill: false,
					tension: 0.5
				}, {
					data: incomingData.map(a => a.lightIntensity),
					label: "Light Intensity",
					borderColor: "#c45850",
					backgroundColor: "#c45850",
					borderWidth: 4,
					fill: false,
					tension: 0.5
				}]
			},
			options: {
				title: {
					display: true,
					text: 'Collected data in Percentage'
				},
				animation: {
					animation: false
				},
				plugins: {
					legend: {
						position: 'bottom',
						labels: {
							usePointStyle: true,
							pointStyle: 'circle',
							font: {
								size: 15,
								weight: 'bold'
							}
						}
					},
					tooltip: {
						bodyFont: {
							size: 15
						}
					}
				},
				elements: {
                    point: {
                        radius: 0
                    }
                },
				scales: {
					x: {
						ticks: {
							autoSkip: true,
							maxTicksLimit: 5.1,
							maxRotation: 0,
							minRotation: 0,
							font: {
								size: 12,
								weight: 'bold'
							}
						},
						grid: {
							display: false
						}
					},
					y: {
						min: 0,
						max: 100,
						ticks: {
							min: 0,
							max: 100,
							callback: function(value) {
								return (value).toFixed(0) + '%';
							},
							font: {
								size: 12,
								weight: 'bold'
							}
						},
						scaleLabel: {
							display: true,
							labelString: 'Percentage',
						}
					}
				}
			}
		});
	}

	function CreateCelsiusChart(incomingData) {
		// Draw the chart
		window.celsiusChart = new Chart(document.getElementById("celsius-line-chart"), {
			type: 'line',
			data: {
				labels: GetTimestampsAsDates(incomingData.map(a => a.timestamp)),
				datasets: [{
					data: incomingData.map(a => a.airTemperature),
					label: "Air Temperature",
					borderColor: "#3cba9f",
					backgroundColor: "#3cba9f",
					borderWidth: 4,
					fill: false,
					tension: 0.5
				}]
			},
			options: {
				title: {
					display: true,
					text: 'Air Temperature in Celsius'
				},
				animation: {
					animation: false
				},
				plugins: {
					legend: {
						position: 'bottom',
						labels: {
							usePointStyle: true,
							pointStyle: 'circle',
							font: {
								size: 15,
								weight: 'bold'
							}
						}
					},
					tooltip: {
						bodyFont: {
							size: 15
						}
					}
				},
				elements: {
                    point: {
                        radius: 0
                    }
                },
				scales: {
					x: {
						ticks: {
							autoSkip: true,
							maxTicksLimit: 5.1,
							maxRotation: 0,
							minRotation: 0,
							font: {
								size: 12,
								weight: 'bold'
							}
						},
						grid: {
							display: false
						}
					},
					y: {
						min: 0,
						max: 30,
						ticks: {
							callback: function(value) {
								return (value).toFixed(0) + '°C';
							},
							font: {
								size: 12,
								weight: 'bold'
							}
						},
						scaleLabel: {
							display: true
						},
						font: {
							size: 15,
							weight: 5
						}
					}
				}
			}
		});
	}

	function GetTimestampsAsDates(timestamps) {
		let dates = []
		timestamps.forEach((timestamp) => {
			dates.push(moment.unix(timestamp).format("DD/MM/YYYY, HH:mm:ss"))
		})
		return dates
	}

	function UpdatePercentageChartData(chart, data) {
		// Clear labels
		chart.data.labels = []

		// Update labels with the newest dates
		chart.data.labels = GetTimestampsAsDates(data.map(a => a.timestamp))

		// Clear datasets
		chart.data.datasets.forEach((dataset) => {
			dataset.data = []
		});

		// Update labels with the newest dates
		chart.data.datasets[0].data = data.map(a => a.soilMoisture[0])
		chart.data.datasets[1].data = data.map(a => a.soilMoisture[1])
		chart.data.datasets[2].data = data.map(a => a.airHumidity)
		chart.data.datasets[3].data = data.map(a => a.lightIntensity)

		// Commit
		chart.update();
	}

	function UpdateCelsiusChartData(chart, data) {
		// Clear labels
		chart.data.labels = []

		// Update labels with the newest dates
		chart.data.labels = GetTimestampsAsDates(data.map(a => a.timestamp))

		// Clear datasets
		chart.data.datasets.forEach((dataset) => {
			dataset.data = []
		});

		// Update labels with the newest dates
		chart.data.datasets[0].data = data.map(a => a.airTemperature)

		// Commit
		chart.update();
	}

	function CreateFilter() {
		var filter = new Object();
		if ($("#filterCheckbox").is(":checked") === false) {
			return filter;
		}
		
		filter.collectorId = $("#collectorId").val();

		fromDate = $("#fromDateFilter").val()
		toDate = $("#toDateFilter").val()
		filter.fromDate = fromDate
		filter.toDate = toDate
		
		filter.pageSize = 1000

		if (fromDate != "" && toDate != "") {
			filter.pageSize = -1
		}

		return filter
	}

	$(function() {
		$('#filterDiv').change(function() {
			fetchData(JSON.stringify(CreateFilter()))
		})
	})

    $(document).ready(function() {
    	$("#filterDiv").hide();

    	$('#filterCheckbox').click(function() {
    		if ($(this).is(":checked")) {
    			$("#filterDiv").show();
    		} else {
    			$("#filterDiv").hide();
    		}
    	})
		
		fetchData(JSON.stringify(CreateFilter()))
		setInterval(() => fetchData(JSON.stringify(CreateFilter())), 5000);
    });
</script>
}